<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.7/dist/chart.umd.min.js"></script>
<script>
        const goals = {{{ json goals }}};

        const pendingDraws = [];
        const goalIcon = new Image();
        goalIcon.src = "/Football.svg";

        goalIcon.onload = () => {
            while (pendingDraws.length > 0) {
                const [chart, homeOrAway, segment] = pendingDraws.pop();
                drawGoalIcons(chart, homeOrAway, segment);
            }
        }

        function drawGoalIcons(chart, homeOrAway, segment) {
            if (!goalIcon.complete) {
                pendingDraws.push([chart, homeOrAway, segment]);
                return;
            }

            homeOrAway = homeOrAway.toLowerCase();
            const ctx = chart.ctx;
            const xScale = chart.scales.x;
            const y = chart.scales.y.getPixelForTick(0);

            goals[segment].forEach((goalCount, index) => {
                const totalGoals = ((homeOrAway === "both") ? goalCount["home"] + goalCount["away"] : goalCount[homeOrAway]);
                if (totalGoals === 0) return;

                const x = xScale.getPixelForTick(index);
                const tickWidth = (xScale.getPixelForTick(1) - xScale.getPixelForTick(0)) ?? 20;

                // Calculate icon size to fit within the tick width
                const imgSize = Math.min(Math.max(tickWidth * 0.5, 5), 16);
                const spacing = tickWidth / totalGoals;

                // Start at center, adjust to fit within the tick
                const startX = x - ((totalGoals - 1) * spacing) / 2;

                for (let i = 0; i < totalGoals; i++) {
                    ctx.drawImage(goalIcon, startX + i * spacing - (imgSize / 2), y - (imgSize / 2), imgSize, imgSize);
                }
            });
        }

        const goalIconPlugin = {
            id: 'goalIcons',
            afterDraw(chart, args, options) {
                if (options.homeOrAway == undefined || options.segment == undefined) {
                    return;
                }

                drawGoalIcons(chart, options.homeOrAway, options.segment);
            }
        };

        const forceZeroTick = {
            id: 'forceZeroTick',
            afterUpdate(chart) {
                const yScale = chart.scales.y.ticks;

                if (!yScale.some(x => x.value == 0)) {
                    yScale.push({value: 0, label: 0});
                    yScale.sort((a, b) => a - b);
                }
            }
        };

        Chart.register(goalIconPlugin);

        const homeTeam = {
            name: '{{homeTeam}}',
            colour: 'rgb({{colours.home}})'
        };

        const awayTeam = {
            name: '{{awayTeam}}',
            colour: 'rgb({{colours.away}})'
        };

        document.documentElement.style.setProperty("--home", "{{colours.home}}");
        document.documentElement.style.setProperty("--away", "{{colours.away}}");
</script>

{{> header title=title page="Graphs"}}

<div class="container">
    <p><a href="/">‚Üê Back to Match List</a></p>
    
    {{#each segments}}   
    <h2 class="my-3">{{name}}</h2>
    <div class="row justify-content-center text-center">
        <div class="col-lg-6 mb-3">
            <h3>{{../homeTeam}} Stats</h3>
            <canvas id="{{code}}_home"></canvas>
            <script>
                (function(){
                    const data = {{{json (lookup ../home @index)}}};

                    new Chart(document.getElementById("{{code}}_home"), {
                        type: 'bar',
                        data: {
                            labels: [{{#each (lookup ../home @index)}}"{{multiply @index 5}} - {{multiply (add @index 1) 5}}",{{/each}}],
                            datasets: [{
                                label: 'Shots',
                                data: data.map(i => i.Shot)
                            }, {
                                label: 'Crosses',
                                data: data.map(i => i.Cross)
                            }, {
                                label: 'Corners',
                                data: data.map(i => i.Corner)
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    suggestedMax: {{../maxStats}},
                                    stacked: true,
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: "Total Events"
                                    }
                                },
                                x: {
                                    stacked: true,
                                    title: {
                                        display: true,
                                        text: "Minute"
                                    }
                                }
                            },
                            animation: false,
                            plugins: {
                                goalIcons: {
                                    homeOrAway: "home",
                                    segment: {{@index}}
                                }
                            }
                        }
                    });
                })();
                
            </script>
        </div>


        <div class="col-lg-6 mb-3">
            <h3>{{../awayTeam}} Stats</h3>
            <canvas id="{{code}}_away"></canvas>
            <script>
                (function(){
                    const data = {{{json (lookup ../away @index)}}};

                    new Chart(document.getElementById("{{code}}_away"), {
                        type: 'bar',
                        data: {
                            labels: [{{#each (lookup ../away @index)}}"{{multiply @index 5}} - {{multiply (add @index 1) 5}}",{{/each}}],
                            datasets: [{
                                label: 'Shots',
                                data: data.map(i => i.Shot)
                            }, {
                                label: 'Crosses',
                                data: data.map(i => i.Cross)
                            }, {
                                label: 'Corners',
                                data: data.map(i => i.Corner)
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    suggestedMax: {{../maxStats}},
                                    stacked: true,
                                    beginAtZero: true,
                                    title: {
                                        display: true,
                                        text: "Total Events"
                                    }
                                },
                                x: {
                                    stacked: true,
                                    title: {
                                        display: true,
                                        text: "Minute"
                                    }
                                }
                            },
                            animation: false,
                            plugins: {
                                goalIcons: {
                                    homeOrAway: "away",
                                    segment: {{@index}}
                                }
                            }
                        }
                    });
                })();
            </script>
        </div>

        <div class="col-lg-8 mb-3">
            <h3>Momentum</h3>
            <canvas id="{{code}}_momentum"></canvas>
            <small>Momentum is calculated by giving each stat type a point score (Corner = 0, Cross = 1, Shot = 2) and summing them all together, then comparing both teams' totals</small>
            <script>
                (function(){
                    const data = [{{#each (lookup ../momentum @index)}}{{this}},{{/each}}];

                    new Chart(document.getElementById("{{code}}_momentum"), {
                        type: 'bar',
                        data: {
                            labels: [{{#each (lookup ../momentum @index)}}"{{multiply @index 5}} - {{multiply (add @index 1) 5}}",{{/each}}],
                            datasets: [{
                                label: homeTeam.name,
                                data: data.map(x => x > 0 ? x : 0),
                                backgroundColor: homeTeam.colour,
                            }, {
                                label: awayTeam.name,
                                data: data.map(x => x < 0 ? x : 0),
                                backgroundColor: awayTeam.colour
                            }]
                        },
                        plugins: [forceZeroTick],
                        options: {
                            scales: {
                                x: {
                                    stacked: true,
                                    title: {
                                        display: true,
                                        text: "Minute"
                                    }
                                },
                                y: {
                                    stacked: true,
                                    suggestedMin: -{{../maxMomentum}},
                                    suggestedMax: {{../maxMomentum}},
                                    ticks: {
                                        callback: (value) => Math.abs(value) 
                                    },
                                    title: {
                                        display: true,
                                        text: "Momentum"
                                    },
                                    grid: {
                                        drawBorder: false,
                                        color: (context) => context.tick.value === 0 ? "black" : "rgba(0,0,0,0.1)", 
                                        lineWidth: (context) => context.tick.value === 0 ? 2 : 1
                                    },
                                    beginAtZero: true
                                }
                            },
                            animation: false,
                            plugins: {
                                goalIcons: {
                                    homeOrAway: "both",
                                    segment: {{@index}}
                                }
                            }
                        }
                    });
                })();
            </script>
        </div>
    </div>
    {{/each}}
</div>

<div class="container-fluid">
<h2>Outcomes</h2>
<div class="row text-center">
    <div class="col-lg-6 py-3 outcomes-home">
        <h3>{{homeTeam}}</h3>
        <div class="row">
            {{#each categories}}
            <div class="col-lg-4 mb-3">
                <h4>{{@key}}</h4>
                <div class="outcome-col">
                    <canvas id="home_{{lower @key}}"></canvas>
                </div>
                <script>
                    (function(){
                        new Chart(document.getElementById("home_{{lower @key}}"), {
                            type: 'doughnut',
                            data: {                      
                                labels: [{{#each substats}}"{{@key}}",{{/each}}],
                                datasets: [{
                                    data: [{{#each substats}}{{home}},{{/each}}]
                                }]
                            },
                            options: {
                                animation: false,
                                plugins: {
                                    legend: {
                                        display: false
                                    }
                                }
                            }
                        })
                    })();
                </script>
            </div>
            {{/each}}
        </div>
    </div>

    <div class="col-lg-6 py-3 outcomes-away">
        <h3>{{awayTeam}}</h3>
        <div class="row">
            {{#each categories}}
            <div class="col-lg-4 mb-3">
                <h4>{{@key}}</h4>
                <div class="outcome-col">
                    <canvas id="away_{{lower @key}}"></canvas>
                </div>
                <script>
                    (function(){
                        new Chart(document.getElementById("away_{{lower @key}}"), {
                            type: 'doughnut',
                            data: {                      
                                labels: [{{#each substats}}"{{@key}}",{{/each}}],
                                datasets: [{
                                    data: [{{#each substats}}{{away}},{{/each}}]
                                }]
                            },
                            options: {
                                animation: false,
                                plugins: {
                                    legend: {
                                        display: false
                                    }
                                }
                            }
                        })
                    })();
                </script>
            </div>
            {{/each}}
        </div>
    </div>
</div>
</div>