<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.7/dist/chart.umd.min.js"></script>
<script>
    //define goals globally for all charts to make use of
    const goals = {{{json goals}}};

    const pendingDraws = [];
    const goalIcon = new Image();
    goalIcon.src = "/Football.svg";

    goalIcon.onload = () => {
        while(pendingDraws.length > 0){
            const [chart, homeOrAway, segment] = pendingDraws.pop();
            drawGoalIcons(chart, homeOrAway, segment);
        }
    }

    function drawGoalIcons(chart, homeOrAway, segment, negate = false){
        if(!goalIcon.complete){
            pendingDraws.push([chart, homeOrAway, segment]);
            return;
        }

        homeOrAway = homeOrAway.toLowerCase();
        goals[segment].forEach((goalCount, index) => {
            const totalGoals = (homeOrAway == "both") ? goalCount["home"] + goalCount["away"] : goalCount[homeOrAway];
            if(totalGoals == 0){
                return;
            }

            const xScale = chart.scales.x;
            const yScale = chart.scales.y;

            const tickSpacing = (xScale.getPixelForTick(1) - xScale.getPixelForTick(0)) ?? 20;
            const imgSize = Math.min(Math.max(tickSpacing * 0.5, 10), 20);
            const x = xScale.getPixelForTick(index);

            for(let i = 1; i <= totalGoals; i++){
                const y = chart.scales.y.getPixelForValue(negate ? -i : i);
                chart.ctx.drawImage(goalIcon, x - (imgSize / 2), y, imgSize, imgSize);
            }
        });
    }

    const goalIconPlugin = {
        id: 'goalIcons',
        afterDraw(chart, args, options) {
            if(options.homeOrAway == undefined || options.segment == undefined){
                return;
            }

            if(["both", "home"].includes(options.homeOrAway)){
                drawGoalIcons(chart, "home", options.segment);
            }

            if(["both", "away"].includes(options.homeOrAway)){
                drawGoalIcons(chart, "away", options.segment, options.homeOrAway == "both");
            }
        }
    };

Chart.register(goalIconPlugin);
</script>

{{> header title=title page="Graphs"}}

<h2>Outcomes</h2>
<details>
<summary>{{homeTeam}}</summary>
<div class="row">
    {{#each categories}}
    <div class="col-lg-6 mb-3">
        <h3>{{@key}}</h3>
        <canvas id="home_{{lower @key}}"></canvas>
        <script>
            (function(){
                new Chart(document.getElementById("home_{{lower @key}}"), {
                    type: 'doughnut',
                    data: {                      
                        labels: [{{#each substats}}"{{@key}}",{{/each}}],
                        datasets: [{
                            data: [{{#each substats}}{{home}},{{/each}}]
                        }]
                    }
                })
            })();
        </script>
    </div>
    {{/each}}
</div>
</details>

<details>
<summary>{{awayTeam}}</summary>
<div class="row">
    {{#each categories}}
    <div class="col-lg-6 mb-3">
        <h4>{{@key}}</h4>
        <canvas id="away_{{lower @key}}"></canvas>
        <script>
            (function(){
                new Chart(document.getElementById("away_{{lower @key}}"), {
                    type: 'doughnut',
                    data: {                      
                        labels: [{{#each substats}}"{{@key}}",{{/each}}],
                        datasets: [{
                            data: [{{#each substats}}{{away}},{{/each}}]
                        }]
                    }
                })
            })();
        </script>
    </div>
    {{/each}}
</div>
</details>

    {{#each segments}}   
    <h2 class="mt-3">{{name}}</h2>
    <div class="row">
        <div class="col-lg-6 mb-3">
            <h3>{{../homeTeam}} Stats</h3>
            <canvas id="{{code}}_home"></canvas>
            <script>
                (function(){
                    const data = {{{json (lookup ../home @index)}}};

                    new Chart(document.getElementById("{{code}}_home"), {
                        type: 'bar',
                        data: {
                            labels: [{{#each (lookup ../home @index)}}"{{multiply @index 5}} - {{multiply (add @index 1) 5}}",{{/each}}],
                            datasets: [{
                                label: 'Shots',
                                data: data.map(i => i.Shot)
                            }, {
                                label: 'Crosses',
                                data: data.map(i => i.Cross)
                            }, {
                                label: 'Corners',
                                data: data.map(i => i.Corner)
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    suggestedMax: {{../maxStats}},
                                    stacked: true
                                },
                                x: {
                                    stacked: true
                                }
                            },
                            plugins: {
                                goalIcons: {
                                    homeOrAway: "home",
                                    segment: {{@index}}
                                }
                            }
                        }
                    });
                })();
                
            </script>
        </div>


        <div class="col-lg-6 mb-3">
            <h3>{{../awayTeam}} Stats</h3>
            <canvas id="{{code}}_away"></canvas>
            <script>
                (function(){
                    const data = {{{json (lookup ../away @index)}}};

                    new Chart(document.getElementById("{{code}}_away"), {
                        type: 'bar',
                        data: {
                            labels: [{{#each (lookup ../away @index)}}"{{multiply @index 5}} - {{multiply (add @index 1) 5}}",{{/each}}],
                            datasets: [{
                                label: 'Shots',
                                data: data.map(i => i.Shot)
                            }, {
                                label: 'Crosses',
                                data: data.map(i => i.Cross)
                            }, {
                                label: 'Corners',
                                data: data.map(i => i.Corner)
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    suggestedMax: {{../maxStats}},
                                    stacked: true
                                },
                                x: {
                                    stacked: true
                                }
                            },
                            plugins: {
                                goalIcons: {
                                    homeOrAway: "away",
                                    segment: {{@index}}
                                }
                            }
                        }
                    });
                })();
            </script>
        </div>

        <div class="col-lg-6 mb-3">
            <h3>Momentum</h3>
            <canvas id="{{code}}_momentum"></canvas>
            <script>
                (function(){
                    const data = [{{#each (lookup ../momentum @index)}}{{this}},{{/each}}];

                    new Chart(document.getElementById("{{code}}_momentum"), {
                        type: 'bar',
                        data: {
                            labels: [{{#each (lookup ../momentum @index)}}"{{multiply @index 5}} - {{multiply (add @index 1) 5}}",{{/each}}],
                            datasets: [{
                                label: 'Home',
                                data: data.map(x => x > 0 ? x : 0),
                                backgroundColor: (ctx) => ctx.raw >= 0 ? '#E4E4E4' : '#353535'
                            }, {
                                label: 'Away',
                                data: data.map(x => x < 0 ? x : 0),
                                backgroundColor: '#353535'
                            }]
                        },
                        options: {
                            scales: {
                                x: {
                                    stacked: true,
                                    title: {
                                        display: true,
                                        text: "Minute"
                                    }
                                },
                                y: {
                                    stacked: true,
                                    suggestedMin: -{{../maxMomentum}},
                                    suggestedMax: {{../maxMomentum}},
                                    ticks: {
                                        callback: (value) => Math.abs(value) 
                                    },
                                    title: {
                                        display: true,
                                        text: "Net Events"
                                    },
                                    grid: {
                                        drawBorder: false,
                                        color: (context) => context.tick.value === 0 ? "black" : "rgba(0,0,0,0.1)", 
                                        lineWidth: (context) => context.tick.value === 0 ? 2 : 1
                                    }
                                }
                            },
                            plugins: {
                                goalIcons: {
                                    homeOrAway: "both",
                                    segment: {{@index}}
                                }
                            }
                        }
                    });
                })();
            </script>
        </div>
    </div>
    {{/each}}
</div>